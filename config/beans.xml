<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd"> 
	<!--连接数据库：引用properties 属性文件 内容 -->       				   
    <context:property-placeholder location="classpath:jdbc.properties"/>
	
	
	<!-- 第一步：使用组件的自动扫描，在cn.itcast.elec包下，可以在类上使用注解@Controller，@Service，@Repository，@Componment（泛指组件） -->
	<context:component-scan base-package="cn.itcast.elec"></context:component-scan>
	
	<!-- 第二步：c3p0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- <property name="driverClass" value="${jdbc.driver}" /> -->
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="5" />
	
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="30" />
	
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10"/>
	
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60"/>
	
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5" />
	
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements  
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。  
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
		<property name="maxStatements" value="0" />
	
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
	
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
	
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效  
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试  
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
		<property name="breakAfterAcquireFailure" value="true" />
   	</bean>
	
	
	<!-- 第三步：创建SessionFactory，这是spring整合hibernate的核心 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
	</bean>
	
	
	<!-- 第四步：配置事务（声明式事务处理） -->
	<bean id="trManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 第五步：使用注解，在Service层的类上添加@Transcational() -->
	<tx:annotation-driven transaction-manager="trManager" proxy-target-class="true"/>
	
	<!-- 添加cxf的配置 -->
	<import resource="beans-cxf.xml"/>
	<!-- 添加Activiti的配置 -->
	<import resource="beans-activiti.xml"/>
	<!-- 添加shiro的配置 -->
	<import resource="beans-shiro.xml"/>
	<!-- 添加shiro对缓存的支持 -->
	<import resource="beans-cache.xml"/>
	
	<!-- 第五步：使用配置文件，在Service层之前添加代理，控制事务
	<tx:advice id="bb" transaction-manager="trManager">
		<tx:attributes>
			<tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* cn.itcast.elec.service..*.*(..))" id="aa"/>
		<aop:advisor advice-ref="bb" pointcut-ref="aa"/>
	</aop:config>
	 -->
</beans>